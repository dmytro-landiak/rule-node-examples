!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@home/components/public-api"),require("@ngx-translate/core"),require("@shared/public-api"),require("@ngrx/store"),require("@angular/forms"),require("@angular/cdk/coercion")):"function"==typeof define&&define.amd?define("custom-nodes-config",["exports","@angular/core","@angular/common","@home/components/public-api","@ngx-translate/core","@shared/public-api","@ngrx/store","@angular/forms","@angular/cdk/coercion"],t):t((e=e||self)["custom-nodes-config"]={},e.ng.core,e.ng.common,e.publicApi,e["ngx-translate"],e.shared,e["ngrx-store"],e.ng.forms,e.ng.cdk.coercion)}(this,(function(e,t,r,o,n,i,a,l,u){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var m=function(e,t){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function s(e,t){function r(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function d(e,t,r,o){var n,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(a=(i<3?n(a):i>3?n(t,r,a):n(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a}function p(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],o=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}var c,g=function(e){function r(t,r){var o=e.call(this,t)||this;return o.store=t,o.fb=r,o}return s(r,e),r.prototype.configForm=function(){return this.analyticsAlarmNodeConfigForm},r.prototype.onConfigurationSet=function(e){this.analyticsAlarmNodeConfigForm=this.fb.group({deviceLabel:[e?e.deviceLabel:null,[l.Validators.required]],model:[e?e.model:null,[l.Validators.required]],keyName:[e?e.keyName:null,[l.Validators.required]],countOfDays:[e?e.countOfDays:null,[l.Validators.required,l.Validators.min(1)]],minThresholdValue:[e?e.minThresholdValue:null],maxThresholdValue:[e?e.maxThresholdValue:null],originator:[e?e.originator:null,[]]})},r.prototype.prepareInputConfig=function(e){return e&&(e.originatorId&&e.originatorType?e.originator={id:e.originatorId,entityType:"ASSET"}:e.originator=null,delete e.originatorId,delete e.originatorType),e},r.prototype.prepareOutputConfig=function(e){return e.originator?(e.originatorId=e.originator.id,e.originatorType="ASSET"):(e.originatorId=null,e.originatorType=null),delete e.originator,e},r.ctorParameters=function(){return[{type:a.Store},{type:l.FormBuilder}]},r=d([t.Component({selector:"tb-prologis-analytics-alarm-node-config",template:'<section [formGroup]="analyticsAlarmNodeConfigForm" fxLayout="column">\n  <div fxLayout="column">\n    <label class="tb-small">{{ \'tb.rulenode.originator\' | translate }}</label>\n    <tb-entity-select\n      required="true"\n      formControlName="originator">\n    </tb-entity-select>\n  </div>\n  <mat-form-field class="mat-block">\n    <mat-label>Device label</mat-label>\n    <input matInput formControlName="deviceLabel" required>\n    <mat-error *ngIf="analyticsAlarmNodeConfigForm.get(\'deviceLabel\').hasError(\'required\')">\n      Device label is required!\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label>Model</mat-label>\n    <input matInput formControlName="model" required>\n    <mat-error *ngIf="analyticsAlarmNodeConfigForm.get(\'model\').hasError(\'required\')">\n      Device model is required!\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label>Key</mat-label>\n    <input matInput formControlName="keyName" required>\n    <mat-error *ngIf="analyticsAlarmNodeConfigForm.get(\'keyName\').hasError(\'required\')">\n     Key name is required!\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label>Count of days</mat-label>\n    <input matInput formControlName="countOfDays" required type="number">\n    <mat-error *ngIf="analyticsAlarmNodeConfigForm.get(\'countOfDays\').hasError(\'required\')">\n      Count of days is required!\n    </mat-error>\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label>Threshold (min)</mat-label>\n    <input matInput formControlName="minThresholdValue" type="number">\n  </mat-form-field>\n  <mat-form-field class="mat-block">\n    <mat-label>Threshold (max)</mat-label>\n    <input matInput formControlName="maxThresholdValue" type="number">\n  </mat-form-field>\n</section>\n\n'}),p("design:paramtypes",[a.Store,l.FormBuilder])],r)}(i.RuleNodeConfigurationComponent),y=function(){function e(){}return e=d([t.NgModule({declarations:[g],imports:[r.CommonModule,i.SharedModule],exports:[g]})],e)}(),b=function(e){function r(t,r){var o=e.call(this,t)||this;return o.store=t,o.fb=r,o}return s(r,e),r.prototype.configForm=function(){return this.enrichmentAlarmLinkNodeConfigForm},r.prototype.onConfigurationSet=function(e){this.enrichmentAlarmLinkNodeConfigForm=this.fb.group({linkPrefix:[e?e.linkPrefix:null,[l.Validators.required]]})},r.ctorParameters=function(){return[{type:a.Store},{type:l.FormBuilder}]},r=d([t.Component({selector:"tb-prologis-enrichment-alarm-link-node-config",template:'<section [formGroup]="enrichmentAlarmLinkNodeConfigForm" fxLayout="column">\n  <mat-form-field class="mat-block">\n    <mat-label>Link Prefix</mat-label>\n    <input matInput formControlName="linkPrefix" required>\n    <mat-error *ngIf="enrichmentAlarmLinkNodeConfigForm.get(\'linkPrefix\').hasError(\'required\')">\n      Link prefix is required!\n    </mat-error>\n  </mat-form-field>\n</section>\n\n\n'}),p("design:paramtypes",[a.Store,l.FormBuilder])],r)}(i.RuleNodeConfigurationComponent),h=function(){function e(){}return e=d([t.NgModule({declarations:[b],imports:[r.CommonModule,i.SharedModule],exports:[b]})],e)}(),v=function(e){function r(t,r){var o=e.call(this,t)||this;return o.store=t,o.fb=r,o}return s(r,e),r.prototype.configForm=function(){return this.enrichmentAttributesNodeConfigForm},r.prototype.onConfigurationSet=function(e){this.enrichmentAttributesNodeConfigForm=this.fb.group({attrMapping:[e?e.attrMapping:null,[l.Validators.required]]})},r.ctorParameters=function(){return[{type:a.Store},{type:l.FormBuilder}]},r=d([t.Component({selector:"tb-prologis-enrichment-attributes-node-config",template:'<section [formGroup]="enrichmentAttributesNodeConfigForm" fxLayout="column">\n  <label translate class="tb-title tb-required">tb.rulenode.attr-mapping</label>\n  <tb-kv-map-config\n    required\n    formControlName="attrMapping"\n    requiredText="tb.rulenode.attr-mapping-required"\n    keyText="tb.rulenode.source-attribute"\n    keyRequiredText="tb.rulenode.source-attribute-required"\n    valText="tb.rulenode.target-attribute"\n    valRequiredText="tb.rulenode.target-attribute-required">\n  </tb-kv-map-config>\n</section>\n'}),p("design:paramtypes",[a.Store,l.FormBuilder])],r)}(i.RuleNodeConfigurationComponent),x=function(e){function r(t,r,o,n){var i=e.call(this,t)||this;return i.store=t,i.translate=r,i.injector=o,i.fb=n,i.propagateChange=null,i.valueChangeSubscription=null,i}var o;return s(r,e),o=r,Object.defineProperty(r.prototype,"required",{get:function(){return this.requiredValue},set:function(e){this.requiredValue=u.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),r.prototype.ngOnInit=function(){this.ngControl=this.injector.get(l.NgControl),null!=this.ngControl&&(this.ngControl.valueAccessor=this),this.kvListFormGroup=this.fb.group({}),this.kvListFormGroup.addControl("keyVals",this.fb.array([]))},r.prototype.keyValsFormArray=function(){return this.kvListFormGroup.get("keyVals")},r.prototype.registerOnChange=function(e){this.propagateChange=e},r.prototype.registerOnTouched=function(e){},r.prototype.setDisabledState=function(e){this.disabled=e,this.disabled?this.kvListFormGroup.disable({emitEvent:!1}):this.kvListFormGroup.enable({emitEvent:!1})},r.prototype.writeValue=function(e){var t,r,o=this;this.valueChangeSubscription&&this.valueChangeSubscription.unsubscribe();var n=[];if(e)try{for(var i=f(Object.keys(e)),a=i.next();!a.done;a=i.next()){var u=a.value;Object.prototype.hasOwnProperty.call(e,u)&&n.push(this.fb.group({key:[u,[l.Validators.required]],value:[e[u],[l.Validators.required]]}))}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}this.kvListFormGroup.setControl("keyVals",this.fb.array(n)),this.valueChangeSubscription=this.kvListFormGroup.valueChanges.subscribe((function(){o.updateModel()}))},r.prototype.removeKeyVal=function(e){this.kvListFormGroup.get("keyVals").removeAt(e)},r.prototype.addKeyVal=function(){this.kvListFormGroup.get("keyVals").push(this.fb.group({key:["",[l.Validators.required]],value:["",[l.Validators.required]]}))},r.prototype.validate=function(e){return!this.kvListFormGroup.get("keyVals").value.length&&this.required?{kvMapRequired:!0}:this.kvListFormGroup.valid?null:{kvFieldsRequired:!0}},r.prototype.updateModel=function(){var e=this.kvListFormGroup.get("keyVals").value;if(this.required&&!e.length||!this.kvListFormGroup.valid)this.propagateChange(null);else{var t={};e.forEach((function(e){t[e.key]=e.value})),this.propagateChange(t)}},r.ctorParameters=function(){return[{type:a.Store},{type:n.TranslateService},{type:t.Injector},{type:l.FormBuilder}]},d([t.Input(),p("design:type",Boolean)],r.prototype,"disabled",void 0),d([t.Input(),p("design:type",String)],r.prototype,"requiredText",void 0),d([t.Input(),p("design:type",String)],r.prototype,"keyText",void 0),d([t.Input(),p("design:type",String)],r.prototype,"keyRequiredText",void 0),d([t.Input(),p("design:type",String)],r.prototype,"valText",void 0),d([t.Input(),p("design:type",String)],r.prototype,"valRequiredText",void 0),d([t.Input(),p("design:type",Boolean),p("design:paramtypes",[Boolean])],r.prototype,"required",null),r=o=d([t.Component({selector:"tb-kv-map-config",template:'<section fxLayout="column" class="tb-kv-map-config" [formGroup]="kvListFormGroup">\n  <div class="header" fxFlex fxLayout="row" fxLayoutGap="8px">\n    <span class="cell" fxFlex translate>{{ keyText }}</span>\n    <span class="cell" fxFlex translate>{{ valText }}</span>\n    <span [fxShow]="!disabled" style="width: 52px;" innerHTML="&nbsp"></span>\n  </div>\n  <div class="body">\n    <div class="row" fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="8px"\n         formArrayName="keyVals"\n         *ngFor="let keyValControl of keyValsFormArray().controls; let $index = index">\n      <mat-form-field fxFlex floatLabel="always" hideRequiredMarker class="cell mat-block">\n        <mat-label></mat-label>\n        <input [formControl]="keyValControl.get(\'key\')" matInput required\n               placeholder="{{ keyText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'key\').hasError(\'required\')">\n          {{ keyRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field fxFlex floatLabel="always" hideRequiredMarker class="cell mat-block">\n        <mat-label></mat-label>\n        <input [formControl]="keyValControl.get(\'value\')" matInput required\n               placeholder="{{ valText | translate }}"/>\n        <mat-error *ngIf="keyValControl.get(\'value\').hasError(\'required\')">\n          {{ valRequiredText | translate }}\n        </mat-error>\n      </mat-form-field>\n      <button mat-button mat-icon-button color="primary"\n              [fxShow]="!disabled"\n              type="button"\n              (click)="removeKeyVal($index)"\n              [disabled]="isLoading$ | async"\n              matTooltip="{{ \'tb.key-val.remove-entry\' | translate }}"\n              matTooltipPosition="above">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n  <tb-error [error]="ngControl.hasError(\'kvMapRequired\')\n                  ? translate.instant(requiredText) : \'\'"></tb-error>\n  <div style="margin-top: 8px;">\n    <button mat-button mat-raised-button color="primary"\n            [fxShow]="!disabled"\n            [disabled]="isLoading$ | async"\n            (click)="addKeyVal()"\n            type="button"\n            matTooltip="{{ \'tb.key-val.add-entry\' | translate }}"\n            matTooltipPosition="above">\n      <mat-icon>add</mat-icon>\n      {{ \'action.add\' | translate }}\n    </button>\n  </div>\n</section>\n',providers:[{provide:l.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return o})),multi:!0},{provide:l.NG_VALIDATORS,useExisting:t.forwardRef((function(){return o})),multi:!0}],styles:[":host .tb-kv-map-config{margin-bottom:16px}:host .tb-kv-map-config .header{padding-left:5px;padding-right:5px;padding-bottom:5px}:host .tb-kv-map-config .header .cell{padding-left:5px;padding-right:5px;color:rgba(0,0,0,.54);font-size:12px;font-weight:700;white-space:nowrap}:host .tb-kv-map-config .body{padding-left:5px;padding-right:5px;padding-bottom:20px;max-height:300px;overflow:auto}:host .tb-kv-map-config .body .row{padding-top:5px;max-height:40px}:host .tb-kv-map-config .body .cell{padding-left:5px;padding-right:5px}:host ::ng-deep .tb-kv-map-config .body mat-form-field.cell{margin:0;max-height:40px}:host ::ng-deep .tb-kv-map-config .body mat-form-field.cell .mat-form-field-infix{border-top:0}:host ::ng-deep .tb-kv-map-config .body button.mat-button{margin:0}"]}),p("design:paramtypes",[a.Store,n.TranslateService,t.Injector,l.FormBuilder])],r)}(i.PageComponent),k=function(){function e(){}return e=d([t.NgModule({declarations:[x],imports:[r.CommonModule,i.SharedModule,o.HomeComponentsModule],exports:[x]})],e)}(),C=function(){function e(){}return e=d([t.NgModule({declarations:[v],imports:[r.CommonModule,i.SharedModule,k],exports:[v]})],e)}(),q=[l.Validators.required,l.Validators.min(1),l.Validators.max(2147483647)];!function(e){e.MILLISECONDS="MILLISECONDS",e.SECONDS="SECONDS",e.MINUTES="MINUTES",e.HOURS="HOURS",e.DAYS="DAYS"}(c||(c={}));var S=new Map([[c.MILLISECONDS,"tb.rulenode.time-unit-milliseconds"],[c.SECONDS,"tb.rulenode.time-unit-seconds"],[c.MINUTES,"tb.rulenode.time-unit-minutes"],[c.HOURS,"tb.rulenode.time-unit-hours"],[c.DAYS,"tb.rulenode.time-unit-days"]]),F=function(e){function r(t,r){var o=e.call(this,t)||this;return o.store=t,o.fb=r,o.aggPeriodTimeUnits=[c.MINUTES,c.HOURS,c.DAYS],o.timeUnits=Object.keys(c),o.timeUnitsTranslationMap=S,o}return s(r,e),r.prototype.configForm=function(){return this.filterActivePumpConfigForm},r.prototype.onConfigurationSet=function(e){this.filterActivePumpConfigForm=this.fb.group({periodValue:[e?e.periodValue:null,q],periodTimeUnit:[e?e.periodTimeUnit:null,[l.Validators.required]],telemetryKey:[e?e.keyName:null,[l.Validators.required]],countOfMovement:[e?e.countOfDays:null,[l.Validators.required,l.Validators.min(1)]]})},r.ctorParameters=function(){return[{type:a.Store},{type:l.FormBuilder}]},r=d([t.Component({selector:"tb-prologis-filter-active-pump-config",template:'<section [formGroup]="filterActivePumpConfigForm" fxLayout="column">\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-value</mat-label>\n      <input type="number" step="1" min="1" max="2147483647" matInput formControlName="periodValue" required>\n      <mat-error *ngIf="filterActivePumpConfigForm.get(\'periodValue\').hasError(\'required\')">\n        {{ \'tb.rulenode.execution-period-value-required\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="filterActivePumpConfigForm.get(\'periodValue\').hasError(\'min\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n      <mat-error *ngIf="filterActivePumpConfigForm.get(\'periodValue\').hasError(\'max\')">\n        {{ \'tb.rulenode.time-value-range\' | translate }}\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label translate>tb.rulenode.execution-period-time-unit</mat-label>\n      <mat-select formControlName="periodTimeUnit" required>\n        <mat-option *ngFor="let timeUnit of aggPeriodTimeUnits" [value]="timeUnit">\n          {{ timeUnitsTranslationMap.get(timeUnit) | translate }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div fxLayout="column" fxLayout.gt-sm="row" fxLayoutGap.gt-sm="8px">\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label>Telemetry key</mat-label>\n      <input type="text" matInput formControlName="telemetryKey" required>\n      <mat-error *ngIf="filterActivePumpConfigForm.get(\'telemetryKey\').hasError(\'required\')">\n        Telemetry key name is required!\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field fxFlex class="mat-block">\n      <mat-label>Count of movement</mat-label>\n      <input type="number" matInput formControlName="countOfMovement" required>\n      <mat-error *ngIf="filterActivePumpConfigForm.get(\'countOfMovement\').hasError(\'required\')">\n        Count of movement is required!\n      </mat-error>\n    </mat-form-field>\n  </div>\n</section>\n\n\n\n'}),p("design:paramtypes",[a.Store,l.FormBuilder])],r)}(i.RuleNodeConfigurationComponent),T=function(){function e(){}return e=d([t.NgModule({declarations:[F],imports:[r.CommonModule,i.SharedModule],exports:[F]})],e)}(),N=function(){function e(e){!function(e){e.setTranslation("en_US",{tb:{rulenode:{"msg-key":"Message key","input-key":"Input key","output-key":"Output key"}}},!0)}(e)}return e.ctorParameters=function(){return[{type:n.TranslateService}]},e=d([t.NgModule({imports:[r.CommonModule,i.SharedModule,o.HomeComponentsModule],exports:[y,h,C,T,k]}),p("design:paramtypes",[n.TranslateService])],e)}();e.CustomNodesConfigModule=N,e.ɵa=y,e.ɵb=g,e.ɵc=h,e.ɵd=b,e.ɵe=C,e.ɵf=v,e.ɵg=k,e.ɵh=x,e.ɵi=T,e.ɵj=F,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=custom-nodes-config.umd.min.js.map